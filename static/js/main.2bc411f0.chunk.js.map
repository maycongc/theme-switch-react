{"version":3,"sources":["styles/themes/light.ts","styles/themes/dark.ts","components/Header/styles.ts","components/Header/index.tsx","styles/global.ts","App.tsx","utils/usePersistedState.ts","index.tsx"],"names":["title","colors","primary","primaryDark","secondary","secondaryDark","tertiary","tertiaryDark","background","text","Container","styled","div","p","theme","Header","toggleTheme","useContext","ThemeContext","onChange","checked","checkedIcon","uncheckedIcon","height","width","handleDiameter","onColor","offColor","createGlobalStyle","App","key","actualState","useState","storageValue","localStorage","getItem","JSON","parse","state","setState","useEffect","setItem","stringify","usePersistedState","light","setTheme","dark","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4KAAe,I,IAAA,GACbA,MAAO,QACPC,OAAQ,CACNC,QAAS,UACTC,YAAa,UAEbC,UAAW,UACXC,cAAe,UAEfC,SAAU,UACVC,aAAc,UAEdC,WAAY,UACZC,KAAM,YCbK,GACbT,MAAO,OACPC,OAAQ,CACNC,QAAS,UACTC,YAAa,UAEbC,UAAW,UACXC,cAAe,UAEfC,SAAU,UACVC,aAAc,UACdC,WAAY,UACZC,KAAM,S,wBCVGC,EAAYC,IAAOC,IAAV,sMAEN,SAAAC,GAAC,OAAIA,EAAEC,MAAMb,OAAOC,W,OC2BrBa,EArBuB,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAAkB,EAC/BC,qBAAWC,KAA7BjB,EADiD,EACjDA,OAAQD,EADyC,EACzCA,MAEhB,OACE,eAACU,EAAD,0BAEE,cAAC,IAAD,CACES,SAAUH,EACVI,QAAmB,SAAVpB,EACTqB,aAAa,EACbC,eAAe,EACfC,OAAQ,GACRC,MAAO,GACPC,eAAgB,GAChBC,QAASzB,EAAOG,UAChBuB,SAAU1B,EAAOE,kBCvBVyB,cAAf,kNAQkB,SAAAf,GAAC,OAAIA,EAAEC,MAAMb,OAAOO,cAEzB,SAAAK,GAAC,OAAIA,EAAEC,MAAMb,OAAOQ,QCelBoB,MAff,WAA6B,IAAD,ECRb,SACbC,EACAC,GACc,IAAD,EACaC,oBAAS,WACjC,IAAMC,EAAeC,aAAaC,QAAQL,GAE1C,OAAIG,EAAqBG,KAAKC,MAAMJ,GAE7BF,KANI,mBACNO,EADM,KACCC,EADD,KAab,OAJAC,qBAAU,WACRN,aAAaO,QAAQX,EAAKM,KAAKM,UAAUJ,MACxC,CAACR,EAAKQ,IAEF,CAACA,EAAOC,GDPWI,CAAgC,QAASC,GADzC,mBACnB9B,EADmB,KACZ+B,EADY,KAO1B,OACE,eAAC,IAAD,CAAe/B,MAAOA,EAAtB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,CAAQE,YAPZ,WACE6B,EAAyB,UAAhB/B,EAAMd,MAAoB8C,EAAOF,UEZ9CG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.2bc411f0.chunk.js","sourcesContent":["export default {\r\n  title: 'light',\r\n  colors: {\r\n    primary: '#F49CBB',\r\n    primaryDark: '#F26A8D',\r\n\r\n    secondary: '#DD2D4A',\r\n    secondaryDark: '#AF1D35',\r\n\r\n    tertiary: '#E01530',\r\n    tertiaryDark: '#BB1128',\r\n\r\n    background: '#f5f5f5',\r\n    text: '#1E1B18',\r\n  },\r\n};\r\n","export default {\r\n  title: 'dark',\r\n  colors: {\r\n    primary: '#DD2D4A',\r\n    primaryDark: '#AF1D35',\r\n\r\n    secondary: '#F49CBB',\r\n    secondaryDark: '#F26A8D',\r\n\r\n    tertiary: '#BB1128',\r\n    tertiaryDark: '#E01530',\r\n    background: '#1E1B18',\r\n    text: '#fff',\r\n  },\r\n};\r\n","import styled from 'styled-components';\r\n\r\nexport const Container = styled.div`\r\n  height: 60px;\r\n  background: ${p => p.theme.colors.primary};\r\n  color: #fff;\r\n  font-size: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 0 5rem;\r\n`;\r\n","import React, { useContext } from 'react';\r\nimport Switch from 'react-switch';\r\nimport { ThemeContext } from 'styled-components';\r\n\r\nimport { Container } from './styles';\r\n\r\ninterface HeaderProps {\r\n  toggleTheme(): void;\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ toggleTheme }) => {\r\n  const { colors, title } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <Container>\r\n      Theme Switch\r\n      <Switch\r\n        onChange={toggleTheme}\r\n        checked={title === 'dark'}\r\n        checkedIcon={false}\r\n        uncheckedIcon={false}\r\n        height={10}\r\n        width={40}\r\n        handleDiameter={20}\r\n        onColor={colors.secondary}\r\n        offColor={colors.primaryDark}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nexport default createGlobalStyle`\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n  }\r\n\r\n  body {\r\n    background: ${p => p.theme.colors.background};\r\n    font-size: 14px;\r\n    color: ${p => p.theme.colors.text};\r\n    font-family: sans-serif;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { ThemeProvider, DefaultTheme } from 'styled-components';\r\n\r\nimport usePersistedState from './utils/usePersistedState';\r\n\r\nimport light from './styles/themes/light';\r\nimport dark from './styles/themes/dark';\r\n\r\nimport Header from './components/Header';\r\n\r\nimport GloblalStyle from './styles/global';\r\n\r\nfunction App(): JSX.Element {\r\n  const [theme, setTheme] = usePersistedState<DefaultTheme>('theme', light);\r\n\r\n  function toggleTheme() {\r\n    setTheme(theme.title === 'light' ? dark : light);\r\n  }\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <GloblalStyle />\r\n      <Header toggleTheme={toggleTheme} />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { useState, useEffect, Dispatch, SetStateAction } from 'react';\r\n\r\ntype Response<T> = [T, Dispatch<SetStateAction<T>>];\r\n\r\nexport default function usePersistedState<T>(\r\n  key: string,\r\n  actualState: T,\r\n): Response<T> {\r\n  const [state, setState] = useState(() => {\r\n    const storageValue = localStorage.getItem(key);\r\n\r\n    if (storageValue) return JSON.parse(storageValue);\r\n\r\n    return actualState;\r\n  });\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(key, JSON.stringify(state));\r\n  }, [key, state]);\r\n\r\n  return [state, setState];\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}